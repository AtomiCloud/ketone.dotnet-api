serviceTree: &serviceTree
  landscape: lapras
  platform: dn___platform___
  service: &service dn___service___
  layer: '2'

tags: &tags
  atomi.cloud/platform: dn___platform___
  atomi.cloud/service: dn___service___
  atomi.cloud/layer: '2'

bromine:
  serviceTree:
    <<: *serviceTree
  annotations:
    argocd.argoproj.io/sync-wave: '1'
  # -- Store name to create
  storeName: *service
  # -- Secret of Secrets reference
  rootSecret:
    name: *service
    # -- Infisical Token Reference
    ref:
      # -- Client ID
      clientId: dn___upperps____CLIENT_ID
      # -- Client Secret
      clientSecret: dn___upperps____CLIENT_SECRET

  target: &target dn___service___

api:
  enabled: true
  annotations:
    argocd.argoproj.io/sync-wave: '4'
    argocd.argoproj.io/hook: Sync
    drop_log: 'true'
  nameOverride: 'dn___service___-api'

  envFromSecret: *target

  serviceTree:
    <<: *serviceTree
    module: api

  imagePullSecrets: []

  replicaCount: 1

  appSettings:
    App:
      Mode: Server

  configMountPath: /app/Config

  image:
    repository: dn___platform___-dn___service___-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ''

  serviceAccount:
    create: false
    annotations: {}
    name: ''

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  service:
    type: ClusterIP
    port: 80
    containerPort: 9000

  ingress:
    enabled: true
    className: nginx
    hosts:
      - host: api.dn___service___.dn___platform___.lapras.lvh.me
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: sample
        issuerRef: sample
        hosts:
          - api.dn___service___.dn___platform___.lapras.lvh.me

  resources:
    limits:
      cpu: '1'
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 128Mi

  autoscaling: {}
  readinessProbe:
    periodSeconds: 30
    httpGet:
      path: /
      port: http

  livenessProbe:
    periodSeconds: 30
    httpGet:
      path: /
      port: http

  nodeSelector: {}

  tolerations: []

  affinity: {}

  topologySpreadConstraints: {}

migration:
  annotations:
    argocd.argoproj.io/sync-wave: '3'
    argocd.argoproj.io/hook: Sync
    drop_log: 'true'
  enabled: false

  nameOverride: 'dn___service___-migration'

  envFromSecret: *target

  serviceTree:
    <<: *serviceTree
    module: migration
  aspNetEnv: Development

  appSettings:
    App:
      Mode: Migration

  backoffLimit: 4

  configMountPath: /app/Config

  image:
    repository: dn___platform___-dn___service___-migration
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ''

  imagePullSecrets: []

  serviceAccount:
    create: false
    annotations: {}
    name: ''

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 1Gi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  topologySpreadConstraints: {}

maindb:
  nameOverride: dn___service___-maindb
  primary:
    persistence:
      enabled: false
  auth:
    database: dn___platform___-dn___service___
    username: admin
    password: supersecret

mainstorage:
  nameOverride: dn___service___-mainstorage
  persistence:
    enabled: false
    size: 10Gi
  ingress:
    enabled: true
    ingressClassName: traefik
    hostname: console-mainstorage.dn___service___.dn___platform___.lapras.lvh.me
  apiIngress:
    enabled: true
    ingressClassName: traefik
    hostname: mainstorage.dn___service___.dn___platform___.lapras.lvh.me
  auth:
    rootUser: admin
    rootPassword: supersecret
